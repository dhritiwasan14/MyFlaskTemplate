SQLAlchemy - python objects, actions in the database
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 
db = SQLAlchemy(app)

class Example(db.Model):
	__tablename__ = 'example'
	id = db.Column('id', db.Integer, primary_key=True)
	data = db.Column('data', db.Unicode)
	def__init__(self, id, data):
		self.id = id
		self.data = data


# querying database
examples = Example.query.all()
for ex in examples:
	print(ex.data)

one = Example.query.filter_by(id=3).first()
from alchemy import db
# new entry 
new_ex = Example(5, 'fifth entry')
db.session.add(new_ex)
db.session.commit()
# updating
update_this = Example.query.filter_by(id=3).first()
update_this.data = 'updated'
db.session.commit()
# deleting
db.session.delete(new_ex)
db.session.commit()

# creating relationship 

class Person(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	name = db.Column(db.String(20))
	pets = db.relationship('Pet', backref='owner', lazy ='dynamic')

class Pet(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	name = db.Column(db.String(20))
	owner_id = db.Column(db.Integer, db.ForeignKey('person.id'))
db.create.all()
db.session.commit()
pet_one = Pet(name='Spot', owner=person_one)

# flask-migrate

from flask_script import Manager
from flask_migrate import Migrate, MigrateCommand

migrate = Migrate(app, db)
manager = Manager(app)
manager.add_command('db', MigrateCommand)
/* in command line
python filname.py db init
downgrade and upgrade */
